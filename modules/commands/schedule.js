module.exports.config = {
    name: "schedule",
    version: "1.0.2",
    hasPermssion: 0,
    credits: "Ho√†ng Nguy·ªÖn",//fix by claude - Vietnam timezone
    description: "Qu·∫£n l√Ω th·ªùi kh√≥a bi·ªÉu c√° nh√¢n v·ªõi nh·∫Øc nh·ªü t·ª± ƒë·ªông (m√∫i gi·ªù Vi·ªát Nam)",
    commandCategory: "Ti·ªán √≠ch",
    usages: "[add/remove/view/clear] [th√¥ng tin]",
    cooldowns: 3,
};

module.exports.languages = {
    "vi": {
        "scheduleTitle": "üìÖ TH·ªúI KH√ìA BI·ªÇU C·ª¶A B·∫†N",
        "noSchedule": "‚ùå B·∫°n ch∆∞a c√≥ th·ªùi kh√≥a bi·ªÉu n√†o!",
        "addSuccess": "‚úÖ ƒê√£ th√™m l·ªãch th√†nh c√¥ng!",
        "removeSuccess": "‚úÖ ƒê√£ x√≥a l·ªãch th√†nh c√¥ng!",
        "clearSuccess": "‚úÖ ƒê√£ x√≥a to√†n b·ªô th·ªùi kh√≥a bi·ªÉu!",
        "invalidFormat": "‚ùå ƒê·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá!",
        "notFound": "‚ùå Kh√¥ng t√¨m th·∫•y l·ªãch n√†y!",
        "usage": `üìñ H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG:
        
üî∏ Th√™m l·ªãch: schedule add [th·ªùi gian] | [n·ªôi dung]
   V√≠ d·ª•: schedule add 08:00 | H·ªçc to√°n
   
üî∏ Xem l·ªãch: schedule view
üî∏ X√≥a l·ªãch: schedule remove [s·ªë th·ª© t·ª±]  
üî∏ X√≥a t·∫•t c·∫£: schedule clear

‚è∞ ƒê·ªãnh d·∫°ng th·ªùi gian: HH:MM (24h) - M√∫i gi·ªù Vi·ªát Nam (UTC+7)
üí° Nh·∫Øc nh·ªü s·∫Ω ƒë∆∞·ª£c g·ª≠i trong nh√≥m chat n√†y`
    }
};

// Bi·∫øn ƒë·ªÉ theo d√µi th·ªùi gian cu·ªëi c√πng ƒë√£ ki·ªÉm tra
let lastCheckedTime = '';

// H√†m l·∫•y th·ªùi gian Vi·ªát Nam
function getVietnamTime() {
    const now = new Date();
    // Chuy·ªÉn ƒë·ªïi sang m√∫i gi·ªù Vi·ªát Nam (UTC+7)
    const vietnamTime = new Date(now.getTime() + (7 * 60 * 60 * 1000));
    const hours = String(vietnamTime.getUTCHours()).padStart(2, '0');
    const minutes = String(vietnamTime.getUTCMinutes()).padStart(2, '0');
    return `${hours}:${minutes}`;
}

// H√†m l·∫•y th·ªùi gian Vi·ªát Nam ƒë·∫ßy ƒë·ªß cho hi·ªÉn th·ªã
function getVietnamDateTime() {
    const now = new Date();
    const vietnamTime = new Date(now.getTime() + (7 * 60 * 60 * 1000));
    
    const day = String(vietnamTime.getUTCDate()).padStart(2, '0');
    const month = String(vietnamTime.getUTCMonth() + 1).padStart(2, '0');
    const year = vietnamTime.getUTCFullYear();
    const hours = String(vietnamTime.getUTCHours()).padStart(2, '0');
    const minutes = String(vietnamTime.getUTCMinutes()).padStart(2, '0');
    
    return {
        time: `${hours}:${minutes}`,
        date: `${day}/${month}/${year}`,
        fullDateTime: `${hours}:${minutes} - ${day}/${month}/${year}`
    };
}

module.exports.run = async function({ api, event, args, Users, getText }) {
    const { threadID, messageID, senderID } = event;
    const fs = require('fs-extra');
    const path = require('path');
    
    // ƒê∆∞·ªùng d·∫´n file l∆∞u d·ªØ li·ªáu
    const dataPath = path.join(__dirname, 'cache', 'schedules.json');
    
    // Kh·ªüi t·∫°o file d·ªØ li·ªáu n·∫øu ch∆∞a c√≥
    if (!fs.existsSync(path.dirname(dataPath))) {
        fs.mkdirSync(path.dirname(dataPath), { recursive: true });
    }
    if (!fs.existsSync(dataPath)) {
        fs.writeFileSync(dataPath, '{}');
    }
    
    // ƒê·ªçc d·ªØ li·ªáu
    let scheduleData = {};
    try {
        scheduleData = JSON.parse(fs.readFileSync(dataPath, 'utf8'));
    } catch (e) {
        scheduleData = {};
    }
    
    // Kh·ªüi t·∫°o d·ªØ li·ªáu user n·∫øu ch∆∞a c√≥
    if (!scheduleData[senderID]) {
        scheduleData[senderID] = [];
    }
    
    const command = args[0]?.toLowerCase();
    
    switch (command) {
        case 'add':
            return addSchedule();
        case 'remove':
            return removeSchedule();
        case 'view':
            return viewSchedule();
        case 'clear':
        case 'clearall':
            return clearSchedule();
        default:
            return api.sendMessage(getText("usage"), threadID, messageID);
    }
    
    // Th√™m l·ªãch m·ªõi
    async function addSchedule() {
        const input = args.slice(1).join(' ');
        if (!input.includes('|')) {
            return api.sendMessage("‚ùå ƒê·ªãnh d·∫°ng: schedule add [th·ªùi gian] | [n·ªôi dung]\nV√≠ d·ª•: schedule add 08:00 | H·ªçc to√°n", threadID, messageID);
        }
        
        const [timeStr, content] = input.split('|').map(s => s.trim());
        
        // Ki·ªÉm tra ƒë·ªãnh d·∫°ng th·ªùi gian
        const timeRegex = /^([0-1]?[0-9]|2[0-3]):([0-5][0-9])$/;
        if (!timeRegex.test(timeStr)) {
            return api.sendMessage("‚ùå ƒê·ªãnh d·∫°ng th·ªùi gian kh√¥ng h·ª£p l·ªá! S·ª≠ d·ª•ng HH:MM (24h)", threadID, messageID);
        }
        
        if (!content) {
            return api.sendMessage("‚ùå Vui l√≤ng nh·∫≠p n·ªôi dung cho l·ªãch!", threadID, messageID);
        }
        
        // Chu·∫©n h√≥a th·ªùi gian (th√™m s·ªë 0 ph√≠a tr∆∞·ªõc n·∫øu c·∫ßn)
        const [hours, minutes] = timeStr.split(':');
        const normalizedTime = `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}`;
        
        // L·∫•y th·ªùi gian hi·ªán t·∫°i Vi·ªát Nam ƒë·ªÉ hi·ªÉn th·ªã
        const vietnamDateTime = getVietnamDateTime();
        
        // Th√™m v√†o danh s√°ch v·ªõi th√¥ng tin threadID
        scheduleData[senderID].push({
            time: normalizedTime,
            content: content,
            threadID: threadID,
            created: Date.now(),
            id: Date.now() + Math.random() // Th√™m random ƒë·ªÉ tr√°nh tr√πng l·∫∑p ho√†n to√†n
        });
        
        // S·∫Øp x·∫øp theo th·ªùi gian
        scheduleData[senderID].sort((a, b) => {
            const [hoursA, minutesA] = a.time.split(':').map(Number);
            const [hoursB, minutesB] = b.time.split(':').map(Number);
            return (hoursA * 60 + minutesA) - (hoursB * 60 + minutesB);
        });
        
        // L∆∞u file
        fs.writeFileSync(dataPath, JSON.stringify(scheduleData, null, 2));
        
        return api.sendMessage(`‚úÖ ƒê√£ th√™m l·ªãch th√†nh c√¥ng!\n‚è∞ ${normalizedTime} - ${content}\nTh·ªùi gian hi·ªán t·∫°i: ${vietnamDateTime.fullDateTime}`, threadID, messageID);
    }
    
    // X√≥a l·ªãch
    async function removeSchedule() {
        const index = parseInt(args[1]) - 1;
        
        if (scheduleData[senderID].length === 0) {
            return api.sendMessage(getText("noSchedule"), threadID, messageID);
        }
        
        if (isNaN(index) || index < 0 || index >= scheduleData[senderID].length) {
            return api.sendMessage("‚ùå S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá!", threadID, messageID);
        }
        
        const removed = scheduleData[senderID].splice(index, 1)[0];
        fs.writeFileSync(dataPath, JSON.stringify(scheduleData, null, 2));
        
        return api.sendMessage(`‚úÖ ƒê√£ x√≥a l·ªãch: ${removed.time} - ${removed.content}`, threadID, messageID);
    }
    
    // Xem th·ªùi kh√≥a bi·ªÉu
    async function viewSchedule() {
        const userSchedules = scheduleData[senderID];
        
        if (!userSchedules || userSchedules.length === 0) {
            return api.sendMessage(getText("noSchedule"), threadID, messageID);
        }
        
        const userName = await Users.getNameUser(senderID);
        const vietnamDateTime = getVietnamDateTime();
        
        let message = `üìÖ TH·ªúI KH√ìA BI·ªÇU C·ª¶A ${userName.toUpperCase()}\n`;
        message += "‚ïê".repeat(40) + "\n";
        
        userSchedules.forEach((item, index) => {
            message += `${index + 1}. ‚è∞ ${item.time} - ${item.content}\n`;
        });
        
        message += "‚ïê".repeat(40);
        message += `\nüìä T·ªïng c·ªông: ${userSchedules.length} l·ªãch`;
        message += `\nüïí Th·ªùi gian hi·ªán t·∫°i: ${vietnamDateTime.fullDateTime}`;
        message += `\nüí° Bot s·∫Ω t·ª± ƒë·ªông nh·∫Øc nh·ªü ƒë√∫ng gi·ªù ƒë√£ ƒë·∫∑t`;
        
        return api.sendMessage(message, threadID, messageID);
    }
    
    // X√≥a t·∫•t c·∫£ l·ªãch
    async function clearSchedule() {
        if (!scheduleData[senderID] || scheduleData[senderID].length === 0) {
            return api.sendMessage(getText("noSchedule"), threadID, messageID);
        }
        
        scheduleData[senderID] = [];
        fs.writeFileSync(dataPath, JSON.stringify(scheduleData, null, 2));
        
        return api.sendMessage(getText("clearSuccess"), threadID, messageID);
    }
};

// Event ƒë·ªÉ nh·∫Øc nh·ªü theo l·ªãch - ƒë∆∞·ª£c g·ªçi m·ªói khi c√≥ tin nh·∫Øn
module.exports.handleEvent = async function({ api, event, Users }) {
    // Ch·ªâ x·ª≠ l√Ω tin nh·∫Øn th∆∞·ªùng, tr√°nh x·ª≠ l√Ω c√°c lo·∫°i event kh√°c
    if (event.type !== "message" || event.isGroup === false) return;
    
    const fs = require('fs-extra');
    const path = require('path');
    const dataPath = path.join(__dirname, 'cache', 'schedules.json');
    
    // L·∫•y th·ªùi gian hi·ªán t·∫°i theo m√∫i gi·ªù Vi·ªát Nam
    const currentTime = getVietnamTime();
    
    // Tr√°nh ki·ªÉm tra c√πng m·ªôt th·ªùi ƒëi·ªÉm nhi·ªÅu l·∫ßn
    if (currentTime === lastCheckedTime) return;
    lastCheckedTime = currentTime;
    
    // Debug log - c√≥ th·ªÉ b·ªè comment ƒë·ªÉ ki·ªÉm tra
    // console.log(`[Schedule Debug] Checking time: ${currentTime} (Vietnam timezone)`);
    
    try {
        // Ki·ªÉm tra file t·ªìn t·∫°i
        if (!fs.existsSync(dataPath)) return;
        
        const scheduleData = JSON.parse(fs.readFileSync(dataPath, 'utf8'));
        const processedReminders = new Set(); // Tr√°nh g·ª≠i nh·∫Øc nh·ªü tr√πng l·∫∑p
        
        // Duy·ªát qua t·∫•t c·∫£ user c√≥ l·ªãch
        for (const userID in scheduleData) {
            const userSchedules = scheduleData[userID];
            
            // T√¨m c√°c l·ªãch tr√πng v·ªõi th·ªùi gian hi·ªán t·∫°i
            const matchingSchedules = userSchedules.filter(schedule => {
                const scheduleMatches = schedule.time === currentTime;
                const notProcessed = !processedReminders.has(`${userID}_${schedule.id || schedule.created}`);
                
                // Debug log cho t·ª´ng l·ªãch
                if (scheduleMatches) {
                    console.log(`[Schedule Match] User: ${userID}, Time: ${schedule.time}, Content: ${schedule.content}`);
                }
                
                return scheduleMatches && notProcessed;
            });
            
            if (matchingSchedules.length > 0) {
                try {
                    const userName = await Users.getNameUser(userID);
                    const vietnamDateTime = getVietnamDateTime();
                    
                    // Nh√≥m c√°c l·ªãch theo threadID
                    const schedulesByThread = {};
                    matchingSchedules.forEach(schedule => {
                        const threadID = schedule.threadID;
                        if (!schedulesByThread[threadID]) {
                            schedulesByThread[threadID] = [];
                        }
                        schedulesByThread[threadID].push(schedule);
                        
                        // ƒê√°nh d·∫•u ƒë√£ x·ª≠ l√Ω
                        processedReminders.add(`${userID}_${schedule.id || schedule.created}`);
                    });
                    
                    // G·ª≠i nh·∫Øc nh·ªü cho t·ª´ng thread
                    for (const [targetThreadID, schedules] of Object.entries(schedulesByThread)) {
                        let reminderMessage = `üîî NH·∫ÆC NH·ªû L·ªäCH TR√åNH\n`;
                        reminderMessage += `üë§ ${userName}\n`;
                        reminderMessage += "‚ïê".repeat(30) + "\n";
                        
                        schedules.forEach(schedule => {
                            reminderMessage += `‚è∞ ${schedule.time} - ${schedule.content}\n`;
                        });
                        
                        reminderMessage += "‚ïê".repeat(30);
                        reminderMessage += `\nüáªüá≥ Th·ªùi gian: ${vietnamDateTime.fullDateTime}`;
                        reminderMessage += `\n‚è∞ ƒê√∫ng gi·ªù ƒë√£ ƒë·∫∑t!`;
                        
                        console.log(`[Schedule Reminder] Sending to thread ${targetThreadID} for user ${userName}`);
                        
                        // G·ª≠i tin nh·∫Øn v·ªõi mention
                        try {
                            await api.sendMessage({
                                body: reminderMessage,
                                mentions: [{
                                    tag: userName,
                                    id: userID,
                                    fromIndex: reminderMessage.indexOf(userName)
                                }]
                            }, targetThreadID);
                        } catch (sendError) {
                            // N·∫øu kh√¥ng g·ª≠i ƒë∆∞·ª£c v·ªõi mention, g·ª≠i tin nh·∫Øn th∆∞·ªùng
                            console.log(`Kh√¥ng th·ªÉ g·ª≠i mention t·ªõi ${targetThreadID}, g·ª≠i tin nh·∫Øn th∆∞·ªùng...`);
                            await api.sendMessage(reminderMessage, targetThreadID);
                        }
                    }
                } catch (userError) {
                    console.error(`L·ªói khi x·ª≠ l√Ω nh·∫Øc nh·ªü cho user ${userID}:`, userError);
                }
            }
        }
    } catch (error) {
        console.error('L·ªói khi ki·ªÉm tra l·ªãch nh·∫Øc nh·ªü:', error);
    }
};
