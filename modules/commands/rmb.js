module.exports.config = {
  name: "rmb",
  version: "1.0.0",
  hasPermssion: 3,
  credits: "Trae AI",
  description: "T·ª± ƒë·ªông tag to√†n b·ªô th√†nh vi√™n nh√≥m v√†o l√∫c 12h00, 19h00 v√† 20h50 h√†ng ng√†y ƒë·ªÉ nh·∫Øc nh·ªü v√†o tr·∫≠n",
  commandCategory: "Ti·ªán √≠ch",
  usages: "[add/remove/list/test]",
  cooldowns: 5,
  dependencies: {
    "fs-extra": "",
    "moment-timezone": ""
  }
};

const fs = require("fs-extra");
const path = require("path");
const moment = require("moment-timezone");

// ========== DANH S√ÅCH ADMIN ==========
const ADMIN_IDS = [
  "100027248830437", // Thay b·∫±ng ID Facebook c·ªßa b·∫°n
  "61555955948865",  // Th√™m ID admin kh√°c n·∫øu c·∫ßn
];

// ƒê∆∞·ªùng d·∫´n ƒë·∫øn file l∆∞u tr·ªØ d·ªØ li·ªáu
const dataPath = path.resolve(__dirname, 'data', "gamereminder.json");

// Danh s√°ch c√°c th√¥ng b√°o game
const gameMessages = [
  "‚öîÔ∏è ƒê√£ ƒë·∫øn gi·ªù v√†o tr·∫≠n r·ªìi c√°c chi·∫øn binh! Chu·∫©n b·ªã ƒë·ªì ngh·ªÅ v√† l√™n ƒë∆∞·ªùng th√¥i! üéÆ",
  "üî• Game time! T·∫≠p h·ª£p ƒë·ªôi h√¨nh v√† b·∫Øt ƒë·∫ßu cu·ªôc chi·∫øn n√†o! ‚ö°",
  "üéØ Th·ªùi gian sƒÉn rank ƒë√£ ƒë·∫øn! M·ªçi ng∆∞·ªùi v√†o game ngay th√¥i! üèÜ",
  "‚≠ê Gi·ªù v√†ng ƒë·ªÉ leo rank! Ai s·∫µn s√†ng th√¨ v√†o tr·∫≠n ngay! üöÄ",
  "üéÆ ƒê√£ ƒë·∫øn l√∫c th·ªÉ hi·ªán skill! C√πng nhau dominate server n√†o! üí™",
  "üèπ L√™n ƒë∆∞·ªùng l√†m nhi·ªám v·ª• th√¥i team! Game ƒëang ch·ªù ch√∫ng ta! ‚öîÔ∏è",
  "üî• Prime time! ƒê√¢y l√† l√∫c t·ªët nh·∫•t ƒë·ªÉ ch∆°i game! Let's go! üéØ",
  "‚ö° T·∫≠p h·ª£p l·ª±c l∆∞·ª£ng! ƒê√£ ƒë·∫øn gi·ªù rush rank r·ªìi! üèÜ"
];

// Th√¥ng b√°o lu·∫≠t v√† h∆∞·ªõng d·∫´n ƒëƒÉng k√Ω
const registrationRules = `
ƒê·ªåC TH·∫¨T Kƒ® LU·∫¨T ·ªû D∆Ø·ªöI ƒê·∫∂C BI·ªÜT L√Ä B∆Ø·ªöC ƒêƒÇNG K√ù V√Ä L∆ØU √ù ·ªû CU·ªêI

*_____________________________*

HAI B∆Ø·ªöC QUAN TR·ªåNG ƒê·ªÇ ƒêƒÇNG K√ù
->B∆∞·ªõc 1: Tim ( ‚ù§Ô∏è ) tin nh·∫Øn ƒë·ªÉ tham gia gi·∫£i ƒë·∫•u
->B∆∞·ªõc 2: ƒê·ªÅ c·ª≠ 2 lane m√† b·∫°n ch∆°i ƒë·ªÉ t√¥i x·∫øp v·ªã tr√≠ h·ª£p l√Ω cho b·∫°n

*_____________________________*

L∆ØU √ù:
-Nh·ªØng ng∆∞·ªùi tim v√† ƒë·ªÅ c·ª≠ 2 lane s·∫Ω ƒëc v√†o ƒë·ªôi
-Ai l√†m thi·∫øu 1 trong 2 b∆∞·ªõc s·∫Ω kh√¥ng t√≠nh v√† tuy·ªÉn nh·ªØng ng∆∞·ªùi th·ª±c hi·ªán ƒë·ªß 2 b∆∞·ªõc v√†o danh s√°ch`;

// H√†m l·∫•y th·ªùi gian v√†o tr·∫≠n d·ª±a tr√™n th·ªùi ƒëi·ªÉm th√¥ng b√°o
function getGameStartTime(hour, minute) {
  if (hour === 12 && minute === 0) {
    return "13:30";
  } else if (hour === 19 && minute === 0) {
    return "20:00";
  } else if (hour === 20 && minute === 50) {
    return "21:00";
  }
  return "ngay b√¢y gi·ªù";
}

// Kh·ªüi t·∫°o d·ªØ li·ªáu n·∫øu ch∆∞a t·ªìn t·∫°i
function initData() {
  if (!fs.existsSync(dataPath)) {
    fs.writeFileSync(dataPath, JSON.stringify({
      threads: [],
      lastSent: {}
    }), "utf-8");
  }
  return JSON.parse(fs.readFileSync(dataPath, "utf-8"));
}

// L∆∞u d·ªØ li·ªáu
function saveData(data) {
  fs.writeFileSync(dataPath, JSON.stringify(data, null, 4), "utf-8");
}

// Th√™m thread v√†o danh s√°ch nh·∫≠n th√¥ng b√°o
function addThread(threadID) {
  const data = initData();
  if (data.threads.includes(threadID)) return false;
  data.threads.push(threadID);
  saveData(data);
  return true;
}

// X√≥a thread kh·ªèi danh s√°ch nh·∫≠n th√¥ng b√°o
function removeThread(threadID) {
  const data = initData();
  if (!data.threads.includes(threadID)) return false;
  data.threads = data.threads.filter(id => id !== threadID);
  saveData(data);
  return true;
}

// L·∫•y danh s√°ch thread ƒëang nh·∫≠n th√¥ng b√°o
function getThreads() {
  const data = initData();
  return data.threads;
}

// L·∫•y m·ªôt th√¥ng b√°o game ng·∫´u nhi√™n
function getRandomGameMessage() {
  return gameMessages[Math.floor(Math.random() * gameMessages.length)];
}

// Kh·ªüi t·∫°o interval khi load module
module.exports.onLoad = function ({ api }) {
  // ƒê·∫£m b·∫£o th∆∞ m·ª•c data t·ªìn t·∫°i
  if (!fs.existsSync(path.resolve(__dirname, 'data'))) {
    fs.mkdirSync(path.resolve(__dirname, 'data'));
  }
  
  // Kh·ªüi t·∫°o d·ªØ li·ªáu
  initData();
  
  // Thi·∫øt l·∫≠p interval ƒë·ªÉ ki·ªÉm tra th·ªùi gian g·ª≠i tin nh·∫Øn
  if (!global.gameReminderInterval) {
    global.gameReminderInterval = setInterval(async function () {
      const threads = getThreads();
      if (threads.length === 0) return;
      
      const now = moment().tz('Asia/Ho_Chi_Minh');
      const hour = now.hour();
      const minute = now.minute();
      const second = now.second();
      const currentDate = now.format('YYYY-MM-DD');
      
      const isTargetTime = (hour === 12 && minute === 0) || 
                          (hour === 19 && minute === 0) || 
                          (hour === 20 && minute === 50);
      
      if (isTargetTime && second < 10) {
        const data = initData();
        const timeKey = `${currentDate}-${hour}:${minute}`;
        
        if (data.lastSent && data.lastSent[timeKey]) {
          console.log(`[GAME-REMINDER] ƒê√£ g·ª≠i tin nh·∫Øn cho khung gi·ªù ${hour}:${minute.toString().padStart(2, '0')} ng√†y ${currentDate}, b·ªè qua.`);
          return;
        }
        
        console.log(`[GAME-REMINDER] ƒêang g·ª≠i th√¥ng b√°o game ƒë·∫øn ${threads.length} nh√≥m v√†o l√∫c ${now.format('HH:mm:ss')}`);
        const gameMessage = getRandomGameMessage();
        const gameStartTime = getGameStartTime(hour, minute);
        
        for (const threadID of threads) {
          try {
            // L·∫•y danh s√°ch th√†nh vi√™n nh√≥m
            const threadInfo = await api.getThreadInfo(threadID);
            const botID = api.getCurrentUserID();
            const listUserID = threadInfo.participantIDs.filter(ID => ID != botID);
            
            // T·∫°o mentions ƒë·ªÉ tag t·∫•t c·∫£ th√†nh vi√™n
            let body = `${gameMessage}\n\n‚è∞ TH·ªúI GIAN V√ÄO TR·∫¨N: ${gameStartTime}\n\nV√†o tr·∫≠n th√¥i!\n\n${registrationRules}`;
            const mentions = [];
            let index = 0;
            
            for (const idUser of listUserID) {
              body = "‚Äé" + body;
              mentions.push({ id: idUser, tag: "‚Äé", fromIndex: index - 1 });
              index -= 1;
            }
            
            await api.sendMessage({ body, mentions }, threadID);
            console.log(`[GAME-REMINDER] ƒê√£ g·ª≠i th√¥ng b√°o game ƒë·∫øn nh√≥m ${threadID} (ƒë√£ tag ${listUserID.length} th√†nh vi√™n) - Th·ªùi gian v√†o tr·∫≠n: ${gameStartTime}`);
            
            await new Promise(resolve => setTimeout(resolve, 500));
          } catch (error) {
            console.error(`[GAME-REMINDER] Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn ƒë·∫øn nh√≥m ${threadID}:`, error);
          }
        }
        
        data.lastSent[timeKey] = now.format('HH:mm:ss');
        saveData(data);
        
        const keysToKeep = Object.keys(data.lastSent).filter(key => {
          const keyDate = key.split('-').slice(0, 3).join('-');
          const dateDiff = moment(currentDate).diff(moment(keyDate), 'days');
          return dateDiff <= 7;
        });
        
        const newLastSent = {};
        keysToKeep.forEach(key => {
          newLastSent[key] = data.lastSent[key];
        });
        
        data.lastSent = newLastSent;
        saveData(data);
      }
    }, 5000);
  }
};

// Th√™m h√†m ƒë·ªÉ ki·ªÉm tra th·ªùi gian g·ª≠i tin nh·∫Øn ti·∫øp theo
function getNextSendTime() {
  const now = moment().tz('Asia/Ho_Chi_Minh');
  const currentHour = now.hour();
  const currentMinute = now.minute();
  
  let nextTime;
  let nextGameTime;
  
  if (currentHour < 12) {
    nextTime = moment().tz('Asia/Ho_Chi_Minh').hour(12).minute(0).second(0);
    nextGameTime = "13:30";
  } else if (currentHour < 19) {
    nextTime = moment().tz('Asia/Ho_Chi_Minh').hour(19).minute(0).second(0);
    nextGameTime = "20:00";
  } else if (currentHour < 20 || (currentHour === 20 && currentMinute < 50)) {
    nextTime = moment().tz('Asia/Ho_Chi_Minh').hour(20).minute(50).second(0);
    nextGameTime = "21:00";
  } else {
    nextTime = moment().tz('Asia/Ho_Chi_Minh').add(1, 'day').hour(12).minute(0).second(0);
    nextGameTime = "13:30";
  }
  
  return {
    notifyTime: nextTime.format('HH:mm DD/MM/YYYY'),
    gameTime: nextGameTime
  };
}

module.exports.run = async function ({ api, event, args }) {
  const { threadID, messageID, senderID } = event;
  
  if (!args[0]) {
    const nextInfo = getNextSendTime();
    return api.sendMessage(
      `===== [ GAME REMINDER ] =====\n\n` +
      `S·ª≠ d·ª•ng:\n` +
      `- gamereminder add: Th√™m nh√≥m hi·ªán t·∫°i v√†o danh s√°ch nh·∫≠n th√¥ng b√°o\n` +
      `- gamereminder remove: X√≥a nh√≥m hi·ªán t·∫°i kh·ªèi danh s√°ch nh·∫≠n th√¥ng b√°o\n` +
      `- gamereminder list: Xem danh s√°ch c√°c nh√≥m ƒëang nh·∫≠n th√¥ng b√°o\n` +
      `- gamereminder test: G·ª≠i th√¥ng b√°o test ƒë·ªÉ ki·ªÉm tra\n\n` +
      `üìÖ L·ªãch th√¥ng b√°o h√†ng ng√†y:\n` +
      `‚Ä¢ 12:00 ‚Üí V√†o tr·∫≠n l√∫c 13:30\n` +
      `‚Ä¢ 19:00 ‚Üí V√†o tr·∫≠n l√∫c 20:00\n` +
      `‚Ä¢ 20:50 ‚Üí V√†o tr·∫≠n l√∫c 21:00\n\n` +
      `‚è∞ Th√¥ng b√°o ti·∫øp theo: ${nextInfo.notifyTime} (V√†o tr·∫≠n: ${nextInfo.gameTime})`,
      threadID, messageID
    );
  }
  
  switch (args[0].toLowerCase()) {
    case "add": {
      const success = addThread(threadID);
      if (success) {
        const nextInfo = getNextSendTime();
        return api.sendMessage(
          `‚úÖ ƒê√£ th√™m nh√≥m n√†y v√†o danh s√°ch nh·∫≠n th√¥ng b√°o game reminder.\n\n` +
          `üìÖ L·ªãch th√¥ng b√°o h√†ng ng√†y:\n` +
          `‚Ä¢ 12:00 ‚Üí V√†o tr·∫≠n l√∫c 13:30\n` +
          `‚Ä¢ 19:00 ‚Üí V√†o tr·∫≠n l√∫c 20:00\n` +
          `‚Ä¢ 20:50 ‚Üí V√†o tr·∫≠n l√∫c 21:00\n\n` +
          `‚è∞ Th√¥ng b√°o ti·∫øp theo: ${nextInfo.notifyTime} (V√†o tr·∫≠n: ${nextInfo.gameTime})`,
          threadID, messageID
        );
      } else {
        return api.sendMessage(
          "‚ùé Nh√≥m n√†y ƒë√£ c√≥ trong danh s√°ch nh·∫≠n th√¥ng b√°o.",
          threadID, messageID
        );
      }
    }
    
    case "remove": {
      const success = removeThread(threadID);
      if (success) {
        return api.sendMessage(
          "‚úÖ ƒê√£ x√≥a nh√≥m n√†y kh·ªèi danh s√°ch nh·∫≠n th√¥ng b√°o game reminder.",
          threadID, messageID
        );
      } else {
        return api.sendMessage(
          "‚ùé Nh√≥m n√†y kh√¥ng c√≥ trong danh s√°ch nh·∫≠n th√¥ng b√°o.",
          threadID, messageID
        );
      }
    }
    
    case "list": {
      const threads = getThreads();
      if (threads.length === 0) {
        return api.sendMessage(
          "‚ùé Ch∆∞a c√≥ nh√≥m n√†o trong danh s√°ch nh·∫≠n th√¥ng b√°o.",
          threadID, messageID
        );
      } else {
        const nextInfo = getNextSendTime();
        return api.sendMessage(
          `üìã Danh s√°ch c√°c nh√≥m ƒëang nh·∫≠n th√¥ng b√°o (${threads.length} nh√≥m):\n${threads.join("\n")}\n\n` +
          `üìÖ L·ªãch th√¥ng b√°o h√†ng ng√†y:\n` +
          `‚Ä¢ 12:00 ‚Üí V√†o tr·∫≠n l√∫c 13:30\n` +
          `‚Ä¢ 19:00 ‚Üí V√†o tr·∫≠n l√∫c 20:00\n` +
          `‚Ä¢ 20:50 ‚Üí V√†o tr·∫≠n l√∫c 21:00\n\n` +
          `‚è∞ Th√¥ng b√°o ti·∫øp theo: ${nextInfo.notifyTime} (V√†o tr·∫≠n: ${nextInfo.gameTime})`,
          threadID, messageID
        );
      }
    }
    
    case "test": {
      try {
        const gameMessage = getRandomGameMessage();
        const botID = api.getCurrentUserID();
        const listUserID = event.participantIDs.filter(ID => ID != botID);
        
        // Gi·∫£ l·∫≠p th·ªùi gian test (c√≥ th·ªÉ l√† b·∫•t k·ª≥ khung gi·ªù n√†o)
        const now = moment().tz('Asia/Ho_Chi_Minh');
        const testGameTime = getGameStartTime(19, 0); // Test v·ªõi khung gi·ªù 19:00
        
        let body = `üß™ [TEST] ${gameMessage}\n\n‚è∞ TH·ªúI GIAN V√ÄO TR·∫¨N: ${testGameTime}\n\nV√†o tr·∫≠n th√¥i!\n\n${registrationRules}`;
        const mentions = [];
        let index = 0;
        
        for (const idUser of listUserID) {
          body = "‚Äé" + body;
          mentions.push({ id: idUser, tag: "‚Äé", fromIndex: index - 1 });
          index -= 1;
        }
        
        return api.sendMessage({ body, mentions }, threadID, messageID);
      } catch (error) {
        return api.sendMessage(
          "‚ùé Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn test. Vui l√≤ng th·ª≠ l·∫°i sau.",
          threadID, messageID
        );
      }
    }
    
    default: {
      return api.sendMessage(
        "‚ùé L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. S·ª≠ d·ª•ng: gamereminder [add/remove/list/test]",
        threadID, messageID
      );
    }
  }
};