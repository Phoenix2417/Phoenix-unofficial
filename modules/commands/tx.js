module.exports.config = {
    name: "tx",
    version: "1.2.0",
    hasPermssion: 0,
    credits: "Ho√†ng Nguy·ªÖn",
    description: "Ch∆°i t√†i x·ªâu v·ªõi bot k√®m h√¨nh ·∫£nh",
    commandCategory: "game",
    usages: "[t√†i/x·ªâu] [s·ªë ti·ªÅn/all]",
    cooldowns: 5,
    dependencies: {
        "fs-extra": "",
        "canvas": "",
        "path": ""
    }
};

module.exports.onLoad = async function () {
    const { existsSync, mkdirSync } = require("fs-extra");
    const { join } = require("path");
    const dir = join(__dirname, "cache", "taixiu");
    
    if (!existsSync(dir)) mkdirSync(dir, { recursive: true });
};

// H√†m v·∫Ω x√∫c x·∫Øc tr·ª±c ti·∫øp b·∫±ng Canvas
function drawDice(ctx, x, y, size, value) {
    // V·∫Ω h√¨nh vu√¥ng v·ªõi g√≥c bo tr√≤n m√†u tr·∫Øng
    ctx.fillStyle = "#FFFFFF";
    ctx.beginPath();
    const radius = size * 0.15; // B√°n k√≠nh bo g√≥c
    ctx.moveTo(x + radius, y);
    ctx.lineTo(x + size - radius, y);
    ctx.quadraticCurveTo(x + size, y, x + size, y + radius);
    ctx.lineTo(x + size, y + size - radius);
    ctx.quadraticCurveTo(x + size, y + size, x + size - radius, y + size);
    ctx.lineTo(x + radius, y + size);
    ctx.quadraticCurveTo(x, y + size, x, y + size - radius);
    ctx.lineTo(x, y + radius);
    ctx.quadraticCurveTo(x, y, x + radius, y);
    ctx.closePath();
    ctx.fill();
    
    // V·∫Ω c√°c ch·∫•m tr√™n x√∫c x·∫Øc
    ctx.fillStyle = "#000000";
    const dotSize = size * 0.12; // K√≠ch th∆∞·ªõc ch·∫•m
    const padding = size * 0.2; // Kho·∫£ng c√°ch t·ª´ bi√™n
    const center = size * 0.5; // Trung t√¢m
    
    // V·ªã tr√≠ c√°c ch·∫•m d·ª±a tr√™n gi√° tr·ªã x√∫c x·∫Øc
    switch (value) {
        case 1:
            // Ch·∫•m ch√≠nh gi·ªØa
            drawDot(ctx, x + center, y + center, dotSize);
            break;
            
        case 2:
            // Tr√™n tr√°i v√† d∆∞·ªõi ph·∫£i
            drawDot(ctx, x + padding, y + padding, dotSize);
            drawDot(ctx, x + size - padding, y + size - padding, dotSize);
            break;
            
        case 3:
            // Tr√™n tr√°i, ch√≠nh gi·ªØa v√† d∆∞·ªõi ph·∫£i
            drawDot(ctx, x + padding, y + padding, dotSize);
            drawDot(ctx, x + center, y + center, dotSize);
            drawDot(ctx, x + size - padding, y + size - padding, dotSize);
            break;
            
        case 4:
            // B·ªën g√≥c
            drawDot(ctx, x + padding, y + padding, dotSize);
            drawDot(ctx, x + size - padding, y + padding, dotSize);
            drawDot(ctx, x + padding, y + size - padding, dotSize);
            drawDot(ctx, x + size - padding, y + size - padding, dotSize);
            break;
            
        case 5:
            // B·ªën g√≥c v√† ch√≠nh gi·ªØa
            drawDot(ctx, x + padding, y + padding, dotSize);
            drawDot(ctx, x + size - padding, y + padding, dotSize);
            drawDot(ctx, x + center, y + center, dotSize);
            drawDot(ctx, x + padding, y + size - padding, dotSize);
            drawDot(ctx, x + size - padding, y + size - padding, dotSize);
            break;
            
        case 6:
            // Ba ch·∫•m m·ªói b√™n
            drawDot(ctx, x + padding, y + padding, dotSize);
            drawDot(ctx, x + padding, y + center, dotSize);
            drawDot(ctx, x + padding, y + size - padding, dotSize);
            drawDot(ctx, x + size - padding, y + padding, dotSize);
            drawDot(ctx, x + size - padding, y + center, dotSize);
            drawDot(ctx, x + size - padding, y + size - padding, dotSize);
            break;
    }
}

// H√†m v·∫Ω ch·∫•m tr√≤n
function drawDot(ctx, x, y, size) {
    ctx.beginPath();
    ctx.arc(x, y, size, 0, Math.PI * 2);
    ctx.fill();
}

module.exports.run = async function({ api, event, args, Currencies }) {
    const { threadID, messageID, senderID } = event;
    const fs = require("fs-extra");
    const path = require("path");
    const Canvas = require("canvas");
    
    // Ki·ªÉm tra ƒë·∫ßu v√†o
    if (args.length < 2) return api.sendMessage("C√°ch d√πng: !taixiu [t√†i/x·ªâu] [s·ªë ti·ªÅn/all]", threadID, messageID);
    
    // L·∫•y l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi ch∆°i
    const choice = args[0].toLowerCase();
    if (choice != "t√†i" && choice != "x·ªâu") {
        return api.sendMessage("B·∫°n ch·ªâ c√≥ th·ªÉ ch·ªçn 't√†i' ho·∫∑c 'x·ªâu'", threadID, messageID);
    }
    
    // L·∫•y s·ªë ti·ªÅn ƒë·∫∑t c∆∞·ª£c
    let betAmount;
    const userMoney = await Currencies.getData(senderID);
    const money = userMoney.money || 0;
    
    // X·ª≠ l√Ω ƒë·∫∑t c∆∞·ª£c "all" - to√†n b·ªô s·ªë ti·ªÅn
    if (args[1].toLowerCase() === "all" || args[1].toLowerCase() === "allin") {
        betAmount = money;
        if (betAmount <= 0) {
            return api.sendMessage("B·∫°n kh√¥ng c√≥ ti·ªÅn ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c!", threadID, messageID);
        }
    } else {
        betAmount = parseInt(args[1]);
        if (isNaN(betAmount) || betAmount <= 0) {
            return api.sendMessage("S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l√† m·ªôt s·ªë d∆∞∆°ng", threadID, messageID);
        }
    }
    
    // Ki·ªÉm tra s·ªë d∆∞ c·ªßa ng∆∞·ªùi ch∆°i
    if (money < betAmount) {
        return api.sendMessage(`B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c. S·ªë d∆∞ hi·ªán t·∫°i: ${money}$`, threadID, messageID);
    }
    
    // Tr·ª´ ti·ªÅn c∆∞·ª£c t·ª´ s·ªë d∆∞ c·ªßa ng∆∞·ªùi ch∆°i
    await Currencies.decreaseMoney(senderID, betAmount);
    
    // Th√¥ng b√°o ƒë√£ nh·∫≠n c∆∞·ª£c
    api.sendMessage(`üé≤ ƒê√£ nh·∫≠n c∆∞·ª£c ${betAmount}$ v√†o ${choice}. Ch·ªù k·∫øt qu·∫£...`, threadID, messageID);
    
    // Tung x√∫c x·∫Øc
    await new Promise(resolve => setTimeout(resolve, 3000)); // ƒê·ª£i 3 gi√¢y cho k·ªãch t√≠nh
    
    // Tung 3 x√∫c x·∫Øc, m·ªói x√∫c x·∫Øc c√≥ gi√° tr·ªã t·ª´ 1-6
    const dice1 = Math.floor(Math.random() * 6) + 1;
    const dice2 = Math.floor(Math.random() * 6) + 1;
    const dice3 = Math.floor(Math.random() * 6) + 1;
    
    // T√≠nh t·ªïng ƒëi·ªÉm
    const total = dice1 + dice2 + dice3;
    
    // Thay v√¨ d·ª±a v√†o t·ªïng ƒëi·ªÉm, ch√∫ng ta s·∫Ω s·ª≠ d·ª•ng x√°c su·∫•t 50/50 
    // ƒë·ªÉ quy·∫øt ƒë·ªãnh k·∫øt qu·∫£ l√† t√†i hay x·ªâu
    const randomResult = Math.random(); // S·ªë ng·∫´u nhi√™n t·ª´ 0-1
    const result = randomResult < 0.5 ? "t√†i" : "x·ªâu";
    
    // Ghi ƒë√® k·∫øt qu·∫£ tr√≤ ch∆°i d·ª±a tr√™n t·ªïng ƒëi·ªÉm th·ª±c t·∫ø ƒë·ªÉ hi·ªÉn th·ªã
    // ƒê·ªÉ vi·ªác hi·ªÉn th·ªã k·∫øt qu·∫£ th·ª±c t·∫ø c·ªßa x√∫c x·∫Øc v·∫´n h·ª£p l√Ω
    const actualResult = total >= 11 ? "t√†i" : "x·ªâu";
    
    // T·∫°o h√¨nh ·∫£nh k·∫øt qu·∫£
    try {
        // ƒê∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c cache
        const dirPath = path.join(__dirname, "cache", "taixiu");
        
        // Canvas ƒë·ªÉ v·∫Ω k·∫øt qu·∫£
        const canvas = Canvas.createCanvas(600, 250);
        const ctx = canvas.getContext("2d");
        
        // V·∫Ω n·ªÅn
        ctx.fillStyle = "#1A1A1A";
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        
        // V·∫Ω vi·ªÅn
        ctx.strokeStyle = "#FFCC00";
        ctx.lineWidth = 5;
        ctx.strokeRect(5, 5, canvas.width - 10, canvas.height - 10);
        
        // Ti√™u ƒë·ªÅ
        ctx.font = "bold 40px Arial";
        ctx.fillStyle = "#FFCC00";
        ctx.textAlign = "center";
        ctx.fillText("K·∫æT QU·∫¢ T√ÄI X·ªàU", canvas.width / 2, 50);
        
        // V·∫Ω c√°c x√∫c x·∫Øc tr·ª±c ti·∫øp b·∫±ng canvas
        const diceSize = 100;
        const spacing = 20;
        const startX = (canvas.width - (3 * diceSize + 2 * spacing)) / 2;
        const diceY = 80;
        
        drawDice(ctx, startX, diceY, diceSize, dice1);
        drawDice(ctx, startX + diceSize + spacing, diceY, diceSize, dice2);
        drawDice(ctx, startX + 2 * diceSize + 2 * spacing, diceY, diceSize, dice3);
        
        // V·∫Ω th√¥ng tin k·∫øt qu·∫£ - Hi·ªÉn th·ªã k·∫øt qu·∫£ th·ª±c t·∫ø d·ª±a tr√™n t·ªïng ƒëi·ªÉm
        ctx.font = "bold 30px Arial";
        ctx.fillStyle = "#FFFFFF";
        ctx.textAlign = "center";
        ctx.fillText(`T·ªïng ƒëi·ªÉm: ${total} => ${result.toUpperCase()}`, canvas.width / 2, 220);
        
        // L∆∞u h√¨nh ·∫£nh
        const imageBuffer = canvas.toBuffer();
        const imagePath = path.join(dirPath, `result_${senderID}.png`);
        fs.writeFileSync(imagePath, imageBuffer);
        
        // T·∫°o tin nh·∫Øn k·∫øt qu·∫£
        let resultMessage = "";
        
        // Ki·ªÉm tra th·∫Øng thua
        if (choice === result) {
            // Ng∆∞·ªùi ch∆°i th·∫Øng, nh·∫≠n l·∫°i ti·ªÅn c∆∞·ª£c + ti·ªÅn th∆∞·ªüng
            const winAmount = betAmount * 1.9; // Ti·ªÅn th∆∞·ªüng l√† 190% ti·ªÅn c∆∞·ª£c (l√£i 90%)
            await Currencies.increaseMoney(senderID, winAmount);
            resultMessage += `üéâ Ch√∫c m·ª´ng! B·∫°n ƒë√£ th·∫Øng ${Math.floor(betAmount * 0.9)}$\n`;
            
            if (args[1].toLowerCase() === "all" || args[1].toLowerCase() === "allin") {
                resultMessage += `üî• ALLIN th√†nh c√¥ng! B·∫°n ƒë√£ nh√¢n ƒë√¥i s·ªë ti·ªÅn!\n`;
            }
            
            resultMessage += `üí∞ T·ªïng nh·∫≠n: ${Math.floor(winAmount)}$`;
        } else {
            // Ng∆∞·ªùi ch∆°i thua, ti·ªÅn c∆∞·ª£c ƒë√£ b·ªã tr·ª´ ·ªü tr√™n
            resultMessage += `üò¢ R·∫•t ti·∫øc! B·∫°n ƒë√£ thua ${betAmount}$\n`;
            
            if (args[1].toLowerCase() === "all" || args[1].toLowerCase() === "allin") {
                resultMessage += `üíî ALLIN th·∫•t b·∫°i! B·∫°n ƒë√£ m·∫•t to√†n b·ªô s·ªë ti·ªÅn!\n`;
            }
            
            resultMessage += `üí∞ S·ªë d∆∞ hi·ªán t·∫°i: ${money - betAmount}$`;
        }
        
        // G·ª≠i k·∫øt qu·∫£ k√®m h√¨nh ·∫£nh
        return api.sendMessage(
            { body: resultMessage, attachment: fs.createReadStream(imagePath) },
            threadID,
            () => fs.unlinkSync(imagePath), // X√≥a file sau khi g·ª≠i
            messageID
        );
        
    } catch (e) {
        console.error("L·ªói khi t·∫°o h√¨nh ·∫£nh:", e);
        
        // N·∫øu c√≥ l·ªói, v·∫´n g·ª≠i k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng vƒÉn b·∫£n
        let resultMessage = `üé≤ K·∫øt qu·∫£ x√∫c x·∫Øc: ${dice1} - ${dice2} - ${dice3}\n`;
        resultMessage += `üé≤ T·ªïng ƒëi·ªÉm: ${total} => ${result.toUpperCase()}\n\n`;
        
        if (choice === result) {
            const winAmount = betAmount * 1.9;
            await Currencies.increaseMoney(senderID, winAmount);
            resultMessage += `üéâ Ch√∫c m·ª´ng! B·∫°n ƒë√£ th·∫Øng ${Math.floor(betAmount * 0.9)}$\n`;
            
            if (args[1].toLowerCase() === "all" || args[1].toLowerCase() === "allin") {
                resultMessage += `üî• ALLIN th√†nh c√¥ng!\n`;
            }
            
            resultMessage += `üí∞ T·ªïng nh·∫≠n: ${Math.floor(winAmount)}$`;
        } else {
            resultMessage += `üò¢ R·∫•t ti·∫øc! B·∫°n ƒë√£ thua ${betAmount}$\n`;
            
            if (args[1].toLowerCase() === "all" || args[1].toLowerCase() === "allin") {
                resultMessage += `üíî ALLIN th·∫•t b·∫°i!\n`;
            }
            
            resultMessage += `üí∞ S·ªë d∆∞ hi·ªán t·∫°i: ${money - betAmount}$`;
        }
        
        return api.sendMessage(resultMessage, threadID, messageID);
    }
};

module.exports.languages = {
    "vi": {
        "missingInput": "C√°ch d√πng: !taixiu [t√†i/x·ªâu] [s·ªë ti·ªÅn/all]",
        "invalidChoice": "B·∫°n ch·ªâ c√≥ th·ªÉ ch·ªçn 't√†i' ho·∫∑c 'x·ªâu'",
        "invalidBetAmount": "S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l√† m·ªôt s·ªë d∆∞∆°ng",
        "notEnoughMoney": "B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c. S·ªë d∆∞ hi·ªán t·∫°i: %1$",
        "betAccepted": "üé≤ ƒê√£ nh·∫≠n c∆∞·ª£c %1$ v√†o %2. Ch·ªù k·∫øt qu·∫£...",
        "diceResult": "üé≤ K·∫øt qu·∫£ x√∫c x·∫Øc: %1 - %2 - %3",
        "totalPoints": "üé≤ T·ªïng ƒëi·ªÉm: %1 => %2",
        "win": "üéâ Ch√∫c m·ª´ng! B·∫°n ƒë√£ th·∫Øng %1$",
        "allinSuccess": "üî• ALLIN th√†nh c√¥ng! B·∫°n ƒë√£ nh√¢n ƒë√¥i s·ªë ti·ªÅn!",
        "allinFailed": "üíî ALLIN th·∫•t b·∫°i! B·∫°n ƒë√£ m·∫•t to√†n b·ªô s·ªë ti·ªÅn!",
        "lose": "üò¢ R·∫•t ti·∫øc! B·∫°n ƒë√£ thua %1$",
        "currentBalance": "üí∞ S·ªë d∆∞ hi·ªán t·∫°i: %1$",
        "totalReceived": "üí∞ T·ªïng nh·∫≠n: %1$"
    },
    "en": {
        "missingInput": "Usage: !taixiu [over/under] [amount/all]",
        "invalidChoice": "You can only choose 'over' or 'under'",
        "invalidBetAmount": "Bet amount must be a positive number",
        "notEnoughMoney": "You don't have enough money to place this bet. Current balance: %1$",
        "betAccepted": "üé≤ Bet accepted: %1$ on %2. Waiting for results...",
        "diceResult": "üé≤ Dice results: %1 - %2 - %3",
        "totalPoints": "üé≤ Total points: %1 => %2",
        "win": "üéâ Congratulations! You won %1$",
        "allinSuccess": "üî• ALLIN successful! You've doubled your money!",
        "allinFailed": "üíî ALLIN failed! You've lost all your money!",
        "lose": "üò¢ Sorry! You lost %1$",
        "currentBalance": "üí∞ Current balance: %1$",
        "totalReceived": "üí∞ Total received: %1$"
    }
};
